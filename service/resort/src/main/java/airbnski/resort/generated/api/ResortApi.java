/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.3.4).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package airbnski.resort.generated.api;

import airbnski.resort.generated.model.InlineResponse404;
import airbnski.resort.generated.model.Resort;
import airbnski.resort.service.ResortService;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.context.request.NativeWebRequest;

import java.util.Optional;
import java.util.concurrent.ExecutionException;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-04-14T14:41:49.663320+02:00[Europe/Zurich]")

@Validated
@Api(value = "resort", description = "the resort API")
public interface ResortApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "Retrieve all resorts", nickname = "getAllResorts", notes = "", response = Resort.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Resort.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "Resort data not found", response = InlineResponse404.class) })
    @RequestMapping(value = "/resort",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Resort[]> getAllResorts() throws ExecutionException, InterruptedException {
        return ResponseEntity.ok(ResortService.getAllResorts());
    }


    @ApiOperation(value = "", nickname = "getResortByCoordinates", notes = "Retrieve resort information by geolocation", response = Resort.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Resort.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "Resort data not found", response = InlineResponse404.class) })
    @RequestMapping(value = "/resort/{longitude}/{latitude}/{distance}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Resort[]> getResortByCoordinates(@ApiParam(value = "Longitude of the resort to get",required=true) @PathVariable("longitude") Double longitude,@ApiParam(value = "Latitude of the resort to get",required=true) @PathVariable("latitude") Double latitude,@ApiParam(value = "Distance of the resort to get",required=true) @PathVariable("distance") Double distance) {
        return ResponseEntity.ok(ResortService.getResortByCoordinates(longitude, latitude, distance));
    }


    @ApiOperation(value = "", nickname = "getResortById", notes = "Retrieve resort information by id", response = Resort.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Resort.class),
        @ApiResponse(code = 404, message = "Resort data not found", response = InlineResponse404.class) })
    @RequestMapping(value = "/resort/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Resort> getResortById(@ApiParam(value = "Numeric ID of the resort to get",required=true) @PathVariable("id") Integer id) throws ExecutionException, InterruptedException {
        return ResponseEntity.ok(ResortService.getResort(id));
    }



}
